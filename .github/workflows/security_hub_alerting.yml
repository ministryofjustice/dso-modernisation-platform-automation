---
name: AWS Security Hub Alerting

on:
  workflow_dispatch:
    inputs:
      applications:
        description: 'e.g. nomis or leave blank for all'
        type: string
      environments:
        description: 'e.g. development or leave blank for all'
        type: string
      dryrun:
        type: choice
        description: Dryrun mode (prevents slack alerting, leave as false unless testing)
        default: 'false'
        options:
          - 'true'
          - 'false'        

  schedule:
    - cron: "30 7 * * 1-5"             

permissions:
  id-token: write
  contents: read

jobs:
  check-strategy:
    name: Check Strategy
    runs-on: ubuntu-latest
    outputs:
      matrix: "${{ steps.strategy.outputs.matrix }}"
      dryrun: "${{ steps.options.outputs.dryrun }}"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          ref: ${{ github.ref }}

      - name: Strategy
        id: strategy
        run: |
          echo "Setting strategy matrix event=${GITHUB_EVENT_NAME}"
          if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            matrix=$(src/get_dso_aws_accounts.sh gha "${{ github.event.inputs.applications }}" "${{ github.event.inputs.environments }}")
          elif [[ "${GITHUB_EVENT_NAME}" == "schedule" ]]; then
            matrix=$(src/get_dso_aws_accounts.sh gha "" "")
          else
            echo "Unsupported event ${GITHUB_EVENT_NAME}"
            exit 1
          fi
          echo '' > aws_cli_commands.sh
          echo 'matrix<<EOF' >> $GITHUB_OUTPUT
          echo "${matrix}" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
          echo "{$matrix}"

      - name: Options
        id: options
        run: |
          echo "Setting options, dryrun=${dryrun}, GITHUB_EVENT_NAME=${GITHUB_EVENT_NAME}"
          if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            dryrun="${{ github.event.inputs.dryrun }}"
          elif [[ "${GITHUB_EVENT_NAME}" == "schedule" ]]; then
            echo "This is a scheduled full run with conditional slack alerting"
            dryrun='false'
          else
            echo "Unsupported GITHUB_EVENT_NAME (${GITHUB_EVENT_NAME})"
            exit 1
          fi
          echo "dryrun=${dryrun}"
          echo "dryrun=${dryrun}" >> $GITHUB_OUTPUT

  check-alerts:
    name: Check Alerts
    runs-on: ubuntu-latest
    needs: check-strategy
    strategy:
      matrix: ${{ fromJson(needs.check-strategy.outputs.matrix) }}
      fail-fast: false
   
    steps:
      - name: Get Account Details
        id: account
        run: |
          echo "account name: ${{ matrix.account_name }}"
          account_id="${{ fromJSON(secrets.MODERNISATION_PLATFORM_ENVIRONMENT_MANAGEMENT).account_ids[matrix.account_name] }}"
          role_arn="arn:aws:iam::${account_id}:role/modernisation-platform-oidc-cicd"
          echo "role arn:     ${role_arn}"
          echo "role_arn=${role_arn}" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838 # v5.0.0
        with:
          role-to-assume: "${{ steps.account.outputs.role_arn }}"
          role-session-name: "github-${{ github.repository_id }}-${{ github.run_id }}-1"
          aws-region: eu-west-2

      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          ref: ${{ github.ref }}

      - name: Check Security Hub Alerts
        id: check-alerts
        env:
          dryrun: ${{ needs.check-strategy.outputs.dryrun }}
        run: |
          exitcode=0
          echo src/security-hub-alerting.sh ${{ matrix.account_name }} $options
          src/security-hub-alerting.sh ${{ matrix.account_name }} $options 2>output.txt || exitcode=$?
          if [[ $exitcode -ne 0 ]]; then
            echo "failed on first attempt with exitcode=${exitcode}; retrying"
            # we get the odd CLI timeout, retry after a random delay
            sleep $(( 10 + RANDOM % 50 ))
            src/security-hub-alerting.sh ${{ matrix.account_name }} $options 2>output.txt || exitcode=$?
          fi
          failedcount=$(cat output.txt | grep "^Verbose1: " | cut -d" " -f2- | wc -l | tr -d [[:space:]])
          ignoredcount=$(cat output.txt | grep "^Verbose2: " | cut -d" " -f2- | wc -l | tr -d [[:space:]])
          echo "exitcode=${exitcode} failedcount=${failedcount} ignoredcount=${ignoredcount}"
          echo "exitcode=${exitcode}" >> $GITHUB_OUTPUT
          echo "failedcount=${failedcount}" >> $GITHUB_OUTPUT
          echo "ignoredcount=${ignoredcount}" >> $GITHUB_OUTPUT

      - name: Dryrun Check Alerts
        if: ${{ needs.check-strategy.outputs.dryrun == 'true' }}
        run: |
          cat output.txt | grep "^DRYRUN: " | cut -d" " -f2-

      - name: Debug Failed Check Alerts
        if: ${{ steps.check-alerts.outputs.failedcount != 0 }}
        run: |
          cat output.txt | grep "^Verbose1: " | cut -d" " -f2-

      - name: Debug Ignored Check Alerts
        if: ${{ steps.check-alerts.outputs.ignoredcount != 0 }}
        run: |
          cat output.txt | grep "^Verbose2: " | cut -d" " -f2-

      - name: Debug Error
        if: ${{ steps.check-alerts.outputs.exitcode != 0 }}
        env:
          exitcode: ${{ steps.check-alerts.outputs.exitcode }}
        run: |
          cat output.txt | grep -v "^Verbose" | grep -v "^DRYRUN"
          exit $exitcode

      - name: Upload results for ${{ matrix.account_name }}
        uses: actions/upload-artifact@v4
        with:
            name: account-${{ matrix.account_name }}
            path: |
                account-${{ matrix.account_name }}.txt
            retention-days: 1
      
  consolidate-accounts:
    needs: check-alerts
    runs-on: ubuntu-latest

    steps:
        - name: Download all artifacts
          uses: actions/download-artifact@v5
          with:
            merge-multiple: true
        
        - name: Consolidate and show results
          run: |
            echo "Consolidating securityhub alert results from all accounts"
            
            # Initialize our consolidated list of results across all processed accounts
            {
                echo "Count of New findings in last 7 days:"
                echo
                printf "%-15s %-10s %-8s %s\n" "ACCOUNT ID" "Critical" "High" "Account Name"
                printf "%-15s %-10s %-8s %s\n" "----------" "--------" "----" "------------"
            } >> all-alerts.txt
            
            # Process each account's data
            for account_file in account-*; do
                # echo "account_file bash var is set to $account_file"
                # pwd
                # ls -l
                # echo "cat account_file"
                # cat $account_file

                # Add account to the master text file
                if [ -f "$account_file" ]; then
                echo "Adding $account_file summary line to all-alerts.txt"
                cat "$account_file" >> all-alerts.txt
                fi
            done

            printf "Consolidation complete\n\n"
            cat ./all-alerts.txt
            
        - name: Upload consolidated results
          uses: actions/upload-artifact@v4
          with:
            name: consolidated-accounts
            path: |
                all-alerts.txt
            retention-days: 30

        - name: evaluate results for conditional slack notification
          id: evaluate
          if: ${{ inputs.dryrun == 'false' }}
          run: |
            echo "Executing evaluation as dryrun is not enabled"
            # Check and take action if non-zero alerts found
            sed -n '5,$p' all-alerts.txt | awk '$2 != 0 || $3 != 0 { found=1; print "New Alerts Found: ", $0 } END { if(found) exit 1; else exit 0 }' && {
                echo "All clean - no action needed"
            } || {
                # Initialize our consolidated list of non-zero results across all processed accounts
                {
                    echo "Count of New Alerts triggered in last 7 days:"
                    echo
                    printf "%-15s %-10s %-8s %s\n" "ACCOUNT ID" "Critical" "High" "Account Name"
                    printf "%-15s %-10s %-8s %s\n" "----------" "--------" "----" "------------"
                } >> new-alerts.txt

                sed -n '5,$p' all-alerts.txt | awk '$2 != 0 || $3 != 0' >> new-alerts.txt
                cat ./new-alerts.txt
                if [ -f new-alerts.txt ]; then
                  echo "new-alerts-exist=true" >> $GITHUB_OUTPUT
                else
                  echo "new-alerts-exist=false" >> $GITHUB_OUTPUT
                fi

                # Write new-alerts.txt to the GITHUB_ENV file to make it available to subsequent steps or $GITHUB_OUTPUT for next jobs,use a unique delimiter (e.g., EOF) to handle multiline content
                echo "NEW_ALERTS<<EOF" >> $GITHUB_ENV
                cat new-alerts.txt >> $GITHUB_ENV
                echo "EOF" >> $GITHUB_ENV
                }
        - name: Slack notification
          if: steps.evaluate.outputs.new-alerts-exist == 'true'
          # run: |
          #   message="ðŸš¨ *New AWS Security Hub Alerts Detected* ðŸš¨\nThe following accounts have new Critical or High alerts:\n\`\`\`\n${{ env.NEW_ALERTS }}\n\`\`\`\nPlease review and take action immediately."
          #   printf $message

          uses: slackapi/slack-github-action@91efab103c0de0a537f72a35f6b8cda0ee76bf0a #v2.1.1
          with:
            webhook: ${{ secrets.SLACK_WEBHOOK_DSO_ALERTS_PIPELINE }}
            webhook-type: incoming-webhook
            payload: |     
              text: "ðŸš¨ *New AWS Security Hub Alerts Detected* ðŸš¨\nThe following accounts have new Critical or High alerts:\n\`\`\`\n${{ env.NEW_ALERTS }}\n\`\`\`\nPlease review and take action immediately."


        #  - name: Send severity summary to Slack
        # if: steps.fetch-webhook-url.outputs.webhook_url != ''
        # env:
        #   SLACK_WEBHOOK_URL: ${{ steps.fetch-webhook-url.outputs.webhook_url }}
        #   ACCOUNT_NAME: ${{ matrix.account.name }}
        #   ACCOUNT_NUMBER: ${{ env.ACCOUNT_NUMBER }}
        # run: |
        #   MESSAGE="*Security Hub Severity Summary - $ACCOUNT_NAME ($ACCOUNT_NUMBER)*\n\`\`\`\n${{ steps.analyze-findings.outputs.output }}\n\`\`\`"
        #   curl -X POST -H 'Content-type: application/json' --data "{\"text\": \"$MESSAGE\"}" "$SLACK_WEBHOOK_URL"

