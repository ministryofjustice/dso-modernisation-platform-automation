---
name: AMI Cleanup

on:
  workflow_dispatch:
    inputs:
      applications:
        description: 'e.g. nomis or leave blank for all'
        type: string
      environments:
        description: 'e.g. development or leave blank for all'
        type: string
      ami_cleanup_sh_args:
        description: 'Command line options to ami_cleanup.sh script, e.g. "-d -m 6 delete"'
        type: string
        default: "-d -c -m 3 delete"

permissions:
  id-token: write
  contents: read

jobs:
  strategy:
    name: strategy
    runs-on: ubuntu-latest
    outputs:
      matrix: "${{ steps.strategy.outputs.matrix }}"
      ami_cleanup_sh_args: "${{ steps.options.outputs.ami_cleanup_sh_args }}"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332  # v4.1.7
        with:
          ref: ${{ github.ref }}

      - name: strategy
        id: strategy
        run: |
          echo "Setting strategy matrix event=${GITHUB_EVENT_NAME}"
          if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            matrix=$(src/get_dso_aws_accounts.sh gha "${{ github.event.inputs.applications }}" "${{ github.event.inputs.environments }}")
          else
            echo "Unsupported event ${GITHUB_EVENT_NAME}"
            exit 1
          fi
          echo 'matrix<<EOF' >> $GITHUB_OUTPUT
          echo "${matrix}" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
          echo "{$matrix}"

      - name: options
        id: options
        run: |
          echo "Setting options event=${GITHUB_EVENT_NAME}"
          if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            ami_cleanup_sh_args="${{ github.event.inputs.ami_cleanup_sh_args }}"
          else
            echo "Unsupported event ${GITHUB_EVENT_NAME}"
            exit 1
          fi
          echo "ami_cleanup_sh_args=${ami_cleanup_sh_args}"
          echo "ami_cleanup_sh_args=${ami_cleanup_sh_args}" >> $GITHUB_OUTPUT

  ami_cleanup:
    name: AMI Cleanup
    runs-on: ubuntu-latest
    needs: strategy
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.strategy.outputs.matrix) }}
    steps:
      - name: Get Account Details
        id: account
        run: |
          echo "account name: ${{ matrix.account_name }}"
          account_id="${{ fromJSON(secrets.MODERNISATION_PLATFORM_ENVIRONMENT_MANAGEMENT).account_ids[matrix.account_name] }}"
          role_arn="arn:aws:iam::${account_id}:role/modernisation-platform-oidc-cicd"
          echo "role arn:     ${role_arn}"
          echo "role_arn=${role_arn}" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502  # v4.0.2
        with:
          role-to-assume: "${{ steps.account.outputs.role_arn }}"
          role-session-name: "github-${{ github.repository_id }}-${{ github.run_id }}-1"
          aws-region: eu-west-2

      - name: Checkout Repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332  # v4.1.7
        with:
          ref: ${{ github.ref }}
          path: dso-modernisation-platform-automation

      - name: Checkout Repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332  # v4.1.7
        with:
          repository: ministryofjustice/modernisation-platform-environments
          path: modernisation-platform-environments

      - name: Cleanup AMIs
        working-directory: ${{ github.workspace }}/dso-modernisation-platform-automation
        run: |
          application=$(echo "${{ matrix.account_name }}" | rev | cut -d- -f2- | rev)
          echo src/ami_cleanup.sh -a "$application" ${{ needs.strategy.outputs.ami_cleanup_sh_args }}
          src/ami_cleanup.sh -a "$application" ${{ needs.strategy.outputs.ami_cleanup_sh_args }}
