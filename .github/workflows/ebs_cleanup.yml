---
name: EBS Cleanup

on:
  workflow_dispatch:
    inputs:
      applications:
        description: 'e.g. nomis or leave blank for all'
        type: string
      environments:
        description: 'e.g. development or leave blank for all'
        type: string
      ebs_cleanup_sh_args:
        description: 'Command line options to ebs_cleanup.sh script. -m <age_in_months>'
        type: string
        default: ""
      dryrun:
        type: choice
        description: Dryrun mode (leave as false unless testing)
        default: false
        options:
          - true
          - false

permissions:
  id-token: write
  contents: read

jobs:
  check-strategy:
    name: Check Strategy
    runs-on: ubuntu-latest
    outputs:
      matrix: "${{ steps.strategy.outputs.matrix }}"
      ebs_cleanup_sh_args: "${{ steps.options.outputs.ebs_cleanup_sh_args }}"
      dryrun: "${{ steps.options.outputs.dryrun }}"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b  # v4.1.4
        with:
          ref: ${{ github.ref }}

      - name: Strategy
        id: strategy
        run: |
          echo "Setting strategy matrix event=${GITHUB_EVENT_NAME}"
          if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            matrix=$(src/get_dso_aws_accounts.sh gha "${{ github.event.inputs.applications }}" "${{ github.event.inputs.environments }}")
          else
            echo "Unsupported event ${GITHUB_EVENT_NAME}"
            exit 1
          fi
          echo '' > cleanup_envs.txt
          echo 'matrix<<EOF' >> $GITHUB_OUTPUT
          echo "${matrix}" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
          echo "{$matrix}"

      - name: Options
        id: options
        run: |
          dryrun=0
          echo "Setting options event=${GITHUB_EVENT_NAME}"
          if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            ebs_cleanup_sh_args="${{ github.event.inputs.ebs_cleanup_sh_args }}"
            if [[ "${{ github.event.inputs.dryrun }}" == "true" ]]; then
              dryrun=1
            fi
          else
            echo "Unsupported event ${GITHUB_EVENT_NAME}"
            exit 1
          fi
          echo "ebs_cleanup_sh_args=${ebs_cleanup_sh_args} dryrun=${dryrun}"
          echo "ebs_cleanup_sh_args=${ebs_cleanup_sh_args}" >> $GITHUB_OUTPUT
          echo "dryrun=${dryrun}" >> $GITHUB_OUTPUT

      # need to use this artifact method because we need to update from multiple matrices, using output vars wont suffice
      - name: Upload cleanup envs list artifact 
        uses: actions/upload-artifact@v4
        with:
          name: "cleanup_envs.txt"
          path: cleanup_envs.txt
          overwrite: true

  check-ebs:
    name: Check ebs
    runs-on: ubuntu-latest
    needs: check-strategy
    strategy:
      matrix: ${{ fromJson(needs.check-strategy.outputs.matrix) }}
      max-parallel: 1
    steps:
      - name: Get Account Details
        id: account
        run: |
          echo "account name: ${{ matrix.account_name }}"
          account_id="${{ fromJSON(secrets.MODERNISATION_PLATFORM_ENVIRONMENT_MANAGEMENT).account_ids[matrix.account_name] }}"
          role_arn="arn:aws:iam::${account_id}:role/modernisation-platform-oidc-cicd"
          echo "role arn:     ${role_arn}"
          echo "role_arn=${role_arn}" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502  # v4.0.2
        with:
          role-to-assume: "${{ steps.account.outputs.role_arn }}"
          role-session-name: "github-${{ github.repository_id }}-${{ github.run_id }}-1"
          aws-region: eu-west-2

      - name: Checkout Repository
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b  # v4.1.4
        with:
          ref: ${{ github.ref }}
          path: dso-modernisation-platform-automation

      - name: Check ebs
        id: check
        working-directory: ${{ github.workspace }}/dso-modernisation-platform-automation
        run: |
          echo src/ebs_cleanup.sh -e "${{ matrix.account_name }}" -d ${{ needs.check-strategy.outputs.ebs_cleanup_sh_args }} delete
          cleanup_output=$(src/ebs_cleanup.sh -e "${{ matrix.account_name }}" -d ${{ needs.check-strategy.outputs.ebs_cleanup_sh_args }} delete | tee)
          if echo $cleanup_output | grep -qE "Dryrun - would delete volume .+ in ${{ matrix.account_name }}"; then
            echo "cleanup=1" >> $GITHUB_OUTPUT
          else
            echo "cleanup=0" >> $GITHUB_OUTPUT
          fi
      
      - name: Download cleanup envs Artifact
        if: ${{ steps.check.outputs.cleanup == 1 }}
        uses: actions/download-artifact@v4
        with:
          name: "cleanup_envs.txt"
          path: dso-modernisation-platform-automation

      - name: Append environment to list
        if: ${{ steps.check.outputs.cleanup == 1 }}
        working-directory: ${{ github.workspace }}/dso-modernisation-platform-automation
        run: |
          ${{ matrix.account_name }} >> cleanup_envs.txt

      - name: Upload cleanup_envs.txt Artifact
        if: ${{ steps.check.outputs.cleanup == 1 }}
        uses: actions/upload-artifact@v4
        with:
          name: "cleanup_envs.txt"
          path: dso-modernisation-platform-automation/cleanup_envs.txt
          overwrite: true

  cleanup-strategy:
    name: Cleanup Strategy
    needs: check-ebs
    runs-on: ubuntu-latest
    outputs:
      run_cleanup: "${{ steps.strategy.outputs.run_cleanup }}"
      matrix: "${{ steps.strategy.outputs.matrix }}"
    steps:
      - name: Download cleanup envs Artifact
        if: ${{ steps.check.outputs.cleanup == 1 }}
        uses: actions/download-artifact@v4
        with:
          name: "cleanup_envs.txt"
      
      - name: Strategy
        id: strategy
        run: |
          get_matrix() {
            echo '{"include":['
            (
              for account in $@; do
                echo '{"account_name": "'"$account"'"},'
              done
            ) | sed '$s/,$//'
            echo ']}'
          }
          run_cleanup=1
          echo "Setting strategy matrix for EBS Cleanup"
          echo "ls"
          ls
          echo "ls .."
          ls ..
          echo "ls ${{ github.workspace }}/.."
          ls ${{ github.workspace }}/..

          accounts=$(cat cleanup_envs.txt)
          matrix=$(get_matrix $accounts)
          [[ -z $accounts ]] && run_cleanup=0
          echo "run_cleanup=${run_cleanup}"
          echo "${matrix}"
          echo "run_cleanup=${run_cleanup}" >> $GITHUB_OUTPUT
          echo 'matrix<<EOF' >> $GITHUB_OUTPUT
          echo "${matrix}" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

  cleanup-ebs:
    name: Cleanup ebs
    needs:
      - check-strategy
    runs-on: ubuntu-latest
    if: ${{ needs.cleanup-strategy.outputs.run_cleanup == 1 && needs.check-strategy.outputs.dryrun == 0 }}
    strategy:
      matrix: ${{ fromJson(needs.cleanup-strategy.outputs.matrix) }}
      max-parallel: 1
    steps:
      - name: Get Account Details
        id: account
        run: |
          echo "account name: ${{ matrix.account_name }}"
          account_id="${{ fromJSON(secrets.MODERNISATION_PLATFORM_ENVIRONMENT_MANAGEMENT).account_ids[matrix.account_name] }}"
          role_arn="arn:aws:iam::${account_id}:role/modernisation-platform-oidc-cicd"
          echo "role arn:     ${role_arn}"
          echo "role_arn=${role_arn}" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502  # v4.0.2
        with:
          role-to-assume: "${{ steps.account.outputs.role_arn }}"
          role-session-name: "github-${{ github.repository_id }}-${{ github.run_id }}-1"
          aws-region: eu-west-2

      - name: Run Commands
        run: |
          src/ebs_cleanup.sh -e "${{ matrix.account_name }}" ${{ needs.check-strategy.outputs.ebs_cleanup_sh_args }} delete
