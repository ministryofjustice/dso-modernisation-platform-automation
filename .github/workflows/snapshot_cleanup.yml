---
name: Snapshot Cleanup

on:
  workflow_dispatch:
    inputs:
      applications:
        description: 'e.g. nomis or leave blank for all'
        type: string
      environments:
        description: 'e.g. development or leave blank for all'
        type: string
      
permissions:
  id-token: write
  contents: read

jobs:
  check-strategy:
    name: Check Strategy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b  # v4.1.4
        with:
          ref: ${{ github.ref }}

      - name: Strategy
        id: strategy
        run: |
          echo "Setting strategy matrix event=${GITHUB_EVENT_NAME}"
          if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            matrix=$(src/get_dso_aws_accounts.sh gha "${{ github.event.inputs.applications }}" "${{ github.event.inputs.environments }}")
          else
            echo "Unsupported event ${GITHUB_EVENT_NAME}"
            exit 1
          fi
          echo '' > aws_cli_commands.sh
          echo 'matrix<<EOF' >> $GITHUB_OUTPUT
          echo "${matrix}" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
          echo "{$matrix}"

      - name: Options
        id: options
        run: |
          dryrun=0
          echo "Seitting options event=${GITHUB_EVENT_NAME}"
          if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            snapshot_cleanup_sh_args=""
          else
            echo "Unsupported event ${GITHUB_EVENT_NAME}"
            exit 1
          fi
          echo "snapshot_cleanup_sh_args=${snapshot_cleanup_sh_args} dryrun=${dryrun}"
          echo "snapshot_cleanup_sh_args=${snapshot_cleanup_sh_args}" >> $GITHUB_OUTPUT
          echo "dryrun=${dryrun}" >> $GITHUB_OUTPUT

      - name: Upload aws cli commands artifact
        uses: actions/upload-artifact@v4
        with:
          name: "aws_cli_commands.sh"
          path: aws_cli_commands.sh

  check-snapshots:
    name: Check Snapshots
    runs-on: ubuntu-latest
    needs: check-strategy
    strategy:
      max-parallel: 1
    steps:
      - name: Get Account Details
        id: account
        run: |
          echo "account name: ${{ matrix.account_name }}"
          account_id="${{ fromJSON(secrets.MODERNISATION_PLATFORM_ENVIRONMENT_MANAGEMENT).account_ids[matrix.account_name] }}"
          role_arn="arn:aws:iam::${account_id}:role/modernisation-platform-oidc-cicd"
          echo "role arn:     ${role_arn}"
          echo "role_arn=${role_arn}" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502  # v4.0.2
        with:
          role-session-name: "github-${{ github.repository_id }}-${{ github.run_id }}-1"
          aws-region: eu-west-2

      - name: Checkout Repository
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b  # v4.1.4
        with:
          ref: ${{ github.ref }}
          path: dso-modernisation-platform-automation

      - name: Checkout Repository
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b  # v4.1.4
        with:
          repository: ministryofjustice/modernisation-platform-environments
          path: modernisation-platform-environments

      - name: Check Snapshots
        id: check
        working-directory: ${{ github.workspace }}/dso-modernisation-platform-automation
        run: |
          [[ -s "commands.sh" ]] && rm -f "commands.sh"
          touch "commands.sh"
          if [[ -s "commands.sh" ]]; then
            echo "cleanup=1" >> $GITHUB_OUTPUT
          else
            echo "cleanup=0" >> $GITHUB_OUTPUT
          fi

      - name: Download aws_cli_commands.sh Artifact
        uses: actions/download-artifact@v4
        with:
          name: "aws_cli_commands.sh"
          path: dso-modernisation-platform-automation

      - name: Append aws cli commands
        working-directory: ${{ github.workspace }}/dso-modernisation-platform-automation
        run: |
          output() {
            echo "export AWS_DEFAULT_PROFILE=${{ matrix.account_name }}"
            cat ./commands.sh
            echo "unset AWS_DEFAULT_PROFILE"
            echo ""
          }
          output
          output >> aws_cli_commands.sh

      - name: Upload aws_cli_commands.sh Artifact
        uses: actions/upload-artifact@v4
        with:
          name: "aws_cli_commands.sh"
          path: dso-modernisation-platform-automation/aws_cli_commands.sh

  cleanup-strategy:
    name: Cleanup Strategy
    needs: check-snapshots
    runs-on: ubuntu-latest
    steps:
      - name: Download Expiry Artifact
        uses: actions/download-artifact@v4
        with:
          name: "aws_cli_commands.sh"

      - name: Strategy
        id: strategy
        run: |
          get_matrix() {
            echo '{"include":['
            (
              for account in $@; do
                echo '{"account_name": "'"$account"'"},'
              done
            ) | sed '$s/,$//'
            echo ']}'
          }
          do_update=1
          echo "Setting strategy matrix for Snapshot Cleanup"
          accounts=$(grep '^export AWS_DEFAULT_PROFILE=' aws_cli_commands.sh | cut -d= -f2)
          matrix=$(get_matrix $accounts)
          [[ -z $accounts ]] && do_update=0
          echo "do_update=${do_update}"
          echo "${matrix}"
          echo "do_update=${do_update}" >> $GITHUB_OUTPUT
          echo 'matrix<<EOF' >> $GITHUB_OUTPUT
          echo "${matrix}" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Print Commands
        run: |
          cat aws_cli_commands.sh

  cleanup-snapshots:
    name: Cleanup Snapshots
    needs:
      - check-strategy
      - cleanup-strategy
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
    steps:
      - name: Get Account Details
        id: account
        run: |
          echo "account name: ${{ matrix.account_name }}"
          account_id="${{ fromJSON(secrets.MODERNISATION_PLATFORM_ENVIRONMENT_MANAGEMENT).account_ids[matrix.account_name] }}"
          role_arn="arn:aws:iam::${account_id}:role/modernisation-platform-oidc-cicd"
          echo "role arn:     ${role_arn}"
          echo "role_arn=${role_arn}" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502  # v4.0.2
        with:
          role-session-name: "github-${{ github.repository_id }}-${{ github.run_id }}-1"
          aws-region: eu-west-2

      - name: Download Expiry Artifact
        uses: actions/download-artifact@v4
        with:
          name: "aws_cli_commands.sh"

      - name: Run Commands
        run: |
          IFS=$'\n'
          cmds=($(sed -n '/export AWS_DEFAULT_PROFILE=${{ matrix.account_name }}/,/unset AWS_DEFAULT_PROFILE/p' aws_cli_commands.sh | grep -v AWS_DEFAULT_PROFILE))
          unset IFS
          n=${#cmds[@]}
          for ((i=0;i<n;i++)); do
            echo "[$((i+1))/$n]: ${cmds[$i]}"
            echo "${cmds[$i]}" > command.sh
            . ./command.sh
          done
