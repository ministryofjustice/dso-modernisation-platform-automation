---
name: NCR Environment Start

on:
  workflow_dispatch:
    inputs:
      ncr_environment:
        type: choice
        description: Which nomis combined reporting environment to start
        default: t1
        options:
          - t1
          - pp
          - pd
      pipeline_stages:
        type: string
        description: limit which stages of the start process to run, 0-8 or all
        default: all
      dryrun:
        type: choice
        description: Dryrun mode (leave as false unless testing)
        default: false
        options:
          - true
          - false
      verbose:
        type: choice
        description: Enable verbose output
        default: false
        options:
          - true
          - false

  schedule:
    # runs at 06:45 local time, 2 entries to deal with BST/GMT
    # second cron at 07:50 is a failsafe, in case something went wrong with the first run
    - cron: "45 5 * * 1-5"
    - cron: "45 6 * * 1-5"
    - cron: "50 6 * * 1-5"
    - cron: "50 7 * * 1-5"

permissions:
  id-token: write
  contents: read

run-name: "NCR Environent Start (${{ inputs.ncr_environment }}${{ inputs.dryrun == 'true' && ' dryrun)' || ')' }}"

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      matrix: "${{ steps.parseinput.outputs.matrix }}"
      ncr_environments: "${{ steps.parseinput.outputs.ncr_environments }}"
      script_flags: "${{ steps.parseinput.outputs.script_flags }}"
      pipeline_stages: "${{ steps.parseinput.outputs.pipeline_stages }}"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          ref: ${{ github.ref }}

      - name: Parse Workflow Inputs
        id: parseinput
        run: |
          get_strategy_matrix() {
            echo '{"include":['
            (
              for ncr_environment in $@; do
                echo '{"ncr_environment": "'$ncr_environment'"},'
              done
            ) | sed '$s/,$//'
            echo ']}'
          }
          ncr_environments=
          script_flags=
          pipeline_stages=all
          if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            ncr_environments="${{ github.event.inputs.ncr_environment }}"
            pipeline_stages="${{ github.event.inputs.pipeline_stages }}"
            if [[ "${{ github.event.inputs.dryrun }}" == "true" ]]; then
              script_flags="$script_flags -d"
            fi
            if [[ "${{ github.event.inputs.verbose }}" == "true" ]]; then
              script_flags="$script_flags -v"
            fi
          elif [[ "${GITHUB_EVENT_NAME}" == "schedule" ]]; then
            cron_time="${{ github.event.schedule }}"
            is_bst=1
            if [[ $(TZ=Europe/London date +%H) == $(date -u +%H) ]]; then
              is_bst=0
            fi
            if [[ "${cron_time}" == '45 5 * * 1-5' || "${cron_time}" == '50 6 * * 1-5' ]]; then
              if ((is_bst == 1)); then
                ncr_environments="t1 pp" #Â space separated list
              fi
            elif [[ "${cron_time}" == '45 6 * * 1-5' || "${cron_time}" == '50 7 * * 1-5' ]]; then
              if ((is_bst == 0)); then
                ncr_environments="t1 pp" # space separated list
              fi
            else
              echo "Unsupported schedule cron ${cron_time}"
              exit 1
            fi
          else
            echo "Unsupported event ${GITHUB_EVENT_NAME}"
            exit 1
          fi
          echo "ncr_environments=${ncr_environments} script_flags=${script_flags} pipeline_stages=${pipeline_stages}"
          echo "matrix=$(get_strategy_matrix $ncr_environments | jq -c)" >> $GITHUB_OUTPUT
          echo "ncr_environments=${ncr_environments}" >> $GITHUB_OUTPUT
          echo "script_flags=${script_flags}" >> $GITHUB_OUTPUT
          echo "pipeline_stages=${pipeline_stages}" >> $GITHUB_OUTPUT

  start:
    name: Start
    needs: setup
    if: ${{ needs.setup.outputs.ncr_environments != '' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          ref: ${{ github.ref }}

      - name: Get Account Name
        env:
          ncr_environment: "${{ matrix.ncr_environment }}"
        id: account_name
        run: |
          account_name=$(src/nomis-combined-reporting/ncr_control.sh -e "$ncr_environment" env aws-account)
          echo "account_name=${account_name}"
          echo "account_name=${account_name}" >> $GITHUB_OUTPUT

      - name: Get Account Id
        id: account_id
        run: |
          account_id="${{ fromJSON(secrets.MODERNISATION_PLATFORM_ENVIRONMENT_MANAGEMENT).account_ids[steps.account_name.outputs.account_name] }}"
          echo "account_id=${account_id}"
          echo "account_id=${account_id}" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838  # v5.0.0
        with:
          role-to-assume: "arn:aws:iam::${{ steps.account_id.outputs.account_id }}:role/modernisation-platform-oidc-cicd"
          role-session-name: "github-${{ github.repository_id }}-${{ github.run_id }}-${{ matrix.ncr_environment }}-1"
          aws-region: eu-west-2

      - name: Start
        env:
          ncr_environment: "${{ matrix.ncr_environment }}"
          script_flags: "${{ needs.setup.outputs.script_flags }}"
          pipeline_stages: "${{ needs.setup.outputs.pipeline_stages }}"
        run: |
          src/nomis-combined-reporting/ncr_control.sh -e "$ncr_environment" $script_flags pipeline start "$pipeline_stages"
