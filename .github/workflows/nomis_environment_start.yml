---
name: NOMIS Environment Start

on:
  workflow_dispatch:
    inputs:
      nomis_environment:
        type: choice
        description: Which nomis environment to start
        default: t1
        options:
          - t1
          - t2
          - t3
          - lsast
          - preprod
      weblogic_deployment:
        type: choice
        description: Which weblogic deployment to use (leave as auto unless testing)
        default: auto
        options:
          - auto
          - a
          - b
      dryrun:
        type: choice
        description: Dryrun mode (leave as false unless testing)
        default: false
        options:
          - true
          - false

  schedule:
    # runs at 06:30 and 09:30 local time. 2 entries to deal with BST/GMT
    - cron: "30 5 * * 1-5"
    - cron: "30 6 * * 1-5"
    - cron: "30 8 * * 1-5"
    - cron: "30 9 * * 1-5"

permissions:
  id-token: write
  contents: read

run-name: "NOMIS Environment Start (${{ inputs.nomis_environment }}${{ inputs.weblogic_deployment == 'auto' && '' || inputs.weblogic_deployment }}${{ inputs.dryrun == 'true' && ' dryrun)' || ')' }}"

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      dryrun: "${{ steps.parseinput.outputs.dryrun }}"
      matrix: "${{ steps.parseinput.outputs.matrix }}"
      nomis_environments: "${{ steps.parseinput.outputs.nomis_environments }}"
      script_flags: "${{ steps.parseinput.outputs.script_flags }}"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871  # v4.2.1
        with:
          ref: ${{ github.ref }}

      - name: Parse Workflow Inputs
        id: parseinput
        run: |
          get_strategy_matrix() {
            echo '{"include":['
            (
              for nomis_environment in $@; do
                echo '{"nomis_environment": "'$nomis_environment'"},'
              done
            ) | sed '$s/,$//'
            echo ']}'
          }
          nomis_environments=
          script_flags=
          dryrun=0
          if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            nomis_environments="${{ github.event.inputs.nomis_environment }}"
            if [[ "${{ github.event.inputs.dryrun }}" == "true" ]]; then
              script_flags="$script_flags -d"
              dryrun=1
            fi
            if [[ "${{ github.event.inputs.weblogic_deployment }}" != "auto" ]]; then
              script_flags="$script_flags -${{ github.event.inputs.weblogic_deployment }}"
            fi
          elif [[ "${GITHUB_EVENT_NAME}" == "schedule" ]]; then
            cron_time="${{ github.event.schedule }}"
            is_bst=1
            if [[ $(TZ=Europe/London date +%H) == $(date -u +%H) ]]; then
              is_bst=0
            fi
            if [[ "${cron_time}" == '30 5 * * 1-5' || "${cron_time}" == '30 8 * * 1-5' ]]; then
              if ((is_bst == 1)); then
                nomis_environments="t3 preprod"
              fi
            elif [[ "${cron_time}" == '30 6 * * 1-5' || "${cron_time}" == '30 9 * * 1-5' ]]; then
              if ((is_bst == 0)); then
                nomis_environments="t3 preprod"
              fi
            else
              echo "Unsupported schedule cron ${cron_time}"
              exit 1
            fi
          else
            echo "Unsupported event ${GITHUB_EVENT_NAME}"
            exit 1
          fi
          echo "nomis_environments=${nomis_environments} script_flags=${script_flags} dryrun=${dryrun}"
          echo "dryrun=${dryrun}" >> $GITHUB_OUTPUT
          echo "matrix=$(get_strategy_matrix $nomis_environments | jq -c)" >> $GITHUB_OUTPUT
          echo "nomis_environments=${nomis_environments}" >> $GITHUB_OUTPUT
          echo "script_flags=${script_flags}" >> $GITHUB_OUTPUT

  start:
    name: Start
    needs: setup
    if: ${{ needs.setup.outputs.nomis_environments != '' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871  # v4.2.1
        with:
          ref: ${{ github.ref }}

      - name: Get Account Name
        env:
          nomis_environment: "${{ matrix.nomis_environment }}"
        id: account_name
        run: |
          account_name=$(src/nomis/nomis_control.sh -z "$nomis_environment")
          echo "account_name=${account_name}"
          echo "account_name=${account_name}" >> $GITHUB_OUTPUT

      - name: Get Account Id
        id: account_id
        run: |
          account_id="${{ fromJSON(secrets.MODERNISATION_PLATFORM_ENVIRONMENT_MANAGEMENT).account_ids[steps.account_name.outputs.account_name] }}"
          echo "account_id=${account_id}"
          echo "account_id=${account_id}" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502  # v4.0.2
        with:
          role-to-assume: "arn:aws:iam::${{ steps.account_id.outputs.account_id }}:role/modernisation-platform-oidc-cicd"
          role-session-name: "github-${{ github.repository_id }}-${{ github.run_id }}-${{ matrix.nomis_environment }}-1"
          aws-region: eu-west-2

      - name: Get Active Weblogic ASG Stats
        id: active_asg_stats
        env:
          nomis_environment: "${{ matrix.nomis_environment }}"
          script_flags: "${{ needs.setup.outputs.script_flags }}"
        run: |
          asg_name=$(src/nomis/nomis_control.sh -n $script_flags "$nomis_environment")
          desired_count=$(src/nomis/nomis_control.sh -c $script_flags "$nomis_environment")
          maintenance_mode=$(src/nomis/nomis_control.sh -m $script_flags "$nomis_environment")
          echo "asg_name=${asg_name} desired_count=${desired_count} maintenance_mode=${maintenance_mode}"
          echo "asg_name=${asg_name}" >> $GITHUB_OUTPUT
          echo "desired_count=${desired_count}" >> $GITHUB_OUTPUT
          echo "maintenance_mode=${maintenance_mode}" >> $GITHUB_OUTPUT

      - name: Set ASG Desired Count
        env:
          asg_name: "${{ steps.active_asg_stats.outputs.asg_name }}"
          dryrun: "${{ needs.setup.outputs.dryrun }}"
        if: steps.active_asg_stats.outputs.desired_count == '0'
        run: |
          if [[ $dryrun == '0' ]]; then
            echo "aws autoscaling set-desired-capacity --desired-capacity 1 --auto-scaling-group-name '$asg_name'" >&2
            aws autoscaling set-desired-capacity --desired-capacity 1 --auto-scaling-group-name "$asg_name"
          else
            echo "Dry Run: aws autoscaling set-desired-capacity --desired-capacity 1 --auto-scaling-group-name '$asg_name'" >&2
          fi

      - name: Wait for healthy Weblogic Instance
        env:
          dryrun: "${{ needs.setup.outputs.dryrun }}"
          script_flags: "${{ needs.setup.outputs.script_flags }}"
          nomis_environment: "${{ matrix.nomis_environment }}"
        run: |
          healthy_instance_count=0
          n=55
          echo "Retrieving healthy instance count: src/nomis/nomis_control.sh -h $script_flags $nomis_environment"
          for i in $(seq 1 $n); do
            healthy_instance_count=$(src/nomis/nomis_control.sh -h $script_flags "$nomis_environment")
            if (( healthy_instance_count > 0 )); then
              echo "healthy_instance_count=${healthy_instance_count}"
              echo "healthy_instance_count=${healthy_instance_count}" >> $GITHUB_OUTPUT
              exit 0
            fi
            if [[ $dryrun != '0' ]]; then
              echo "healthy_instance_count=${healthy_instance_count}"
              echo "healthy_instance_count=${healthy_instance_count}" >> $GITHUB_OUTPUT
              exit 0
            fi
            echo "[$i/$n]: Waiting for healthy instance"
            sleep 60
          done
          echo "Timed out waiting for healthy instance" >&2
          exit 1

      - name: Disable Maintenance Mode
        env:
          script_flags: "${{ needs.setup.outputs.script_flags }}"
          nomis_environment: "${{ matrix.nomis_environment }}"
        if: steps.active_asg_stats.outputs.maintenance_mode == 'enabled'
        run: |
          src/nomis/nomis_control.sh -0 $script_flags "$nomis_environment"
