---
name: Certificate Renewal

on:
  workflow_dispatch:
    inputs:
      ec2_hostname:
        description: 'e.g. pd-cafm-w-37-a'
        type: string
        default: ''
      renew_expiry_days:
        description: 'number of days before expiry to renew'
        type: number
        default: 28
      le_server:
        description: 'e.g. LE_STAGE or LE_PROD'
        type: string
        default: 'LE_PROD'
  schedule:
    # separate crons to ensure certs aren't all updated on same day
    - cron: "30 06 * * 2"
    - cron: "30 06 * * 3"
    - cron: "30 06 * * 4"

permissions:
  id-token: write
  contents: read

# WORK IN PROGRESS
jobs:
  strategy:
    name: Strategy
    runs-on: ubuntu-latest
    outputs:
      le_server: "${{ steps.strategy.outputs.le_server }}"
      matrix: "${{ steps.strategy.outputs.matrix }}"
      renew_expiry_days: "${{ steps.strategy.outputs.renew_expiry_days }}"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b  # v4.1.4
        with:
          ref: ${{ github.ref }}

      - name: Strategy
        id: strategy
        run: |
          echo "Setting strategy matrix event=${GITHUB_EVENT_NAME}"
          if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            matrix=$(src/certificates/get_strategy_matrix.sh ec2_hostname "${{ github.event.inputs.ec2_hostname }}")
            le_server=${{ github.event.inputs.le_server }}
            renew_expiry_days=${{ github.event.inputs.renew_expiry_days }}
          elif [[ "${GITHUB_EVENT_NAME}" == "schedule" ]]; then
            cron_time="${{ github.event.schedule }}"
            le_server="LE_PROD"
            renew_expiry_days=28
            if [[ "${cron_time}" == '30 06 * * 2' ]]; then
              matrix=$(src/certificates/get_strategy_matrix.sh schedule 0)
            elif [[ "${cron_time}" == '30 06 * * 3' ]]; then
              matrix=$(src/certificates/get_strategy_matrix.sh schedule 1)
            elif [[ "${cron_time}" == '30 06 * * 4' ]]; then
              matrix=$(src/certificates/get_strategy_matrix.sh schedule 2)
            else
              echo "Unsupported schedule cron ${cron_time}"
              exit 1
            fi
          else
            echo "Unsupported event ${GITHUB_EVENT_NAME}"
            exit 1
          fi
          echo '' > expiry.txt
          echo "le_server: ${le_server}"
          echo "renew_expiry_days: ${renew_expiry_days}"
          echo "${matrix}"
          echo "le_server=${le_server}" >> $GITHUB_OUTPUT
          echo 'matrix<<EOF' >> $GITHUB_OUTPUT
          echo "${matrix}" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Upload Expiry Artifact
        uses: actions/upload-artifact@v4
        with:
          name: "expiry"
          path: expiry.txt
          overwrite: true

  check-expiry:
    name: Check Expiry
    needs: strategy
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.strategy.outputs.matrix) }}
      max-parallel: 1
    steps:
      - name: Checkout Repository
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b  # v4.1.4
        with:
          ref: ${{ github.ref }}

      - name: Get Config
        id: config
        run: |
          ec2_hostname="${{ matrix.ec2_hostname }}"
          echo "ec2_hostname: $ec2_hostname"
          account_name=$(jq -r '.certs[] | select(.ec2_hostname == "'$ec2_hostname'").account_name' src/certificates/certs.json)
          domain_names=$(jq -r '.certs[] | select(.ec2_hostname == "'$ec2_hostname'").domain_names | join(" ")' src/certificates/certs.json)
          echo "account_name: $account_name"
          echo "domain_names: $domain_names"
          echo "account_name=${account_name}" >> $GITHUB_OUTPUT
          echo "domain_names=${domain_names}" >> $GITHUB_OUTPUT

      - name: Get Account Id
        id: account
        run: |
          echo "account name: ${{ steps.config.outputs.account_name }}"
          account_id="${{ fromJSON(secrets.MODERNISATION_PLATFORM_ENVIRONMENT_MANAGEMENT).account_ids[steps.config.outputs.account_name] }}"
          role_arn="arn:aws:iam::${account_id}:role/modernisation-platform-oidc-cicd"
          echo "role arn:     ${role_arn}"
          echo "role_arn=${role_arn}" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502  # v4.0.2
        with:
          role-to-assume: "${{ steps.account.outputs.role_arn }}"
          role-session-name: "github-${{ github.repository_id }}-${{ github.run_id }}-${{ matrix.ec2_hostname }}-1"
          aws-region: eu-west-2

      - name: Download Expiry Artifact
        uses: actions/download-artifact@v4
        with:
          name: "expiry"

      - name: Get IIS Web Certificate Expiry Days
        id: expiry
        run: |
          ec2_hostname="${{ matrix.ec2_hostname }}"
          expiry_days=$(src/run_script_on_ec2.sh first "$ec2_hostname" "certificate-renewal-get-expiry" "src/certificates/GetWebCertExpiryDays.ps1")
          echo "expiry_days: $expiry_days"
          echo "expiry_days=${expiry_days}" >> $GITHUB_OUTPUT

      - name: Update Expiry Artifact if Missing Cert
        if: ${{ steps.expiry.outputs.expiry_days == '' }}
        run: |
          echo "${{ matrix.ec2_hostname }}" >> expiry.txt

      - name: Update Expiry Artifact if Cert Expiring Soon
        if: ${{ steps.expiry.outputs.expiry_days != '' && steps.expiry.outputs.expiry_days < needs.strategy.outputs.renew_expiry_days }}
        run: |
          echo "${{ matrix.ec2_hostname }}" >> expiry.txt

      - name: Upload Expiry Artifact
        if: ${{ steps.expiry.outputs.expiry_days == '' || steps.expiry.outputs.expiry_days < needs.strategy.outputs.renew_expiry_days }}
        uses: actions/upload-artifact@v4
        with:
          name: "expiry"
          path: expiry.txt
          overwrite: true

  renew-strategy:
    name: Renew Strategy
    needs: check-expiry
    runs-on: ubuntu-latest
    outputs:
      matrix: "${{ steps.strategy.outputs.matrix }}"
    steps:
      - name: Download Expiry Artifact
        uses: actions/download-artifact@v4
        with:
          name: "expiry"

      - name: Strategy
        id: strategy
        run: |
          get_matrix() {
            echo '{"include":['
            (
              for ec2 in $@; do
                echo '{"ec2_hostname": "'"$ec2"'"},'
              done
            ) | sed '$s/,$//'
            echo ']}'
          }
          echo "Setting strategy matrix for certificate renewal"
          matrix=$(get_matrix $(cat expiry.txt))
          echo "${matrix}"
          echo 'matrix<<EOF' >> $GITHUB_OUTPUT
          echo "${matrix}" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

  renew-cert:
    name: Renew Cert
    needs:
      - strategy
      - renew-strategy
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.renew-strategy.outputs.matrix) }}
      max-parallel: 1
    steps:
      - name: Checkout Repository
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b  # v4.1.4
        with:
          ref: ${{ github.ref }}

      - name: Get Config
        id: config
        run: |
          ec2_hostname="${{ matrix.ec2_hostname }}"
          echo "ec2_hostname: $ec2_hostname"
          account_name=$(jq -r '.certs[] | select(.ec2_hostname == "'$ec2_hostname'").account_name' src/certificates/certs.json)
          domain_names=$(jq -r '.certs[] | select(.ec2_hostname == "'$ec2_hostname'").domain_names | join(" ")' src/certificates/certs.json)
          echo "account_name: $account_name"
          echo "domain_names: $domain_names"
          echo "account_name=${account_name}" >> $GITHUB_OUTPUT
          echo "domain_names=${domain_names}" >> $GITHUB_OUTPUT

      - name: Get Account Id
        id: account
        run: |
          echo "account name: ${{ steps.config.outputs.account_name }}"
          account_id="${{ fromJSON(secrets.MODERNISATION_PLATFORM_ENVIRONMENT_MANAGEMENT).account_ids[steps.config.outputs.account_name] }}"
          role_arn="arn:aws:iam::${account_id}:role/modernisation-platform-oidc-cicd"
          echo "role arn:     ${role_arn}"
          echo "role_arn=${role_arn}" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502  # v4.0.2
        with:
          role-to-assume: "${{ steps.account.outputs.role_arn }}"
          role-session-name: "github-${{ github.repository_id }}-${{ github.run_id }}-${{ matrix.ec2_hostname }}-1"
          aws-region: eu-west-2

      - name: Create LetsEncrypt Cert
        shell: pwsh
        run: |
          $PAServer = "${{ needs.strategy.outputs.le_server }}"
          $DomainNames = "${{ steps.config.outputs.domain_names }}"
          Write-Output "Create Cert $PAServer $DomainNames"
          Install-Module -Name Posh-ACME -Force
          Install-Module -Name AWSPowerShell.NetCore -Force
          Set-PAServer $PAServer
          $Password = $(-join ((48..57) + (65..90) + (97..122) | Get-Random -Count 16 | % {[char]$_}))
          $PasswordSecureString = ConvertTo-SecureString $Password -AsPlainText -Force
          $LetsEncryptCert = New-PACertificate ($DomainNames.Split(' ')) -DnsPlugin Route53 -PluginArgs @{R53UseIAMRole=$true} -Contact $Config.Email -AcceptTOS -PfxPass $Password -Force -Verbose
          $ChainFile = [Convert]::ToBase64String([IO.File]::ReadAllBytes($LetsEncryptCert.ChainFile))
          $PfxFile = [Convert]::ToBase64String([IO.File]::ReadAllBytes($LetsEncryptCert.PfxFile))
          echo "chain_file=$ChainFile"
          echo "pfx_file=$PfxFile"
          echo "chain_file=$ChainFile" >> $env:GITHUB_OUTPUT 
          echo "pfx_file=$PfxFile" >> $env:GITHUB_OUTPUT 
          echo "password=$Password" >> $env:GITHUB_OUTPUT 
