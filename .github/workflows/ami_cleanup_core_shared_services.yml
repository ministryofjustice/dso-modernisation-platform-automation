---
name: AMI Cleanup core-shared-services

on:
  workflow_dispatch:
    inputs:
      applications:
        description: 'e.g. nomis or leave blank for all'
        type: string
        default: 'core-shared-services'
      environments:
        description: 'e.g. development or leave blank for all'
        type: string
        default: 'production'
      ami_cleanup_sh_args:
        description: 'Command line options to ami_cleanup.sh script, -c=exclude amis referenced in code, -m <N>=exclude amis younger than <n> months'
        type: string
        default: "-c -m 3"
      dryrun:
        type: choice
        description: Dryrun mode (leave as false unless testing)
        default: false
        options:
          - true
          - false

env:
  source_account_application: nomis
  source_account_environment: test
  source_account: nomis-test

permissions:
  id-token: write
  contents: read

jobs:
  check-strategy:
    name: Check Strategy
    runs-on: ubuntu-latest
    outputs:
      matrix: "${{ steps.strategy.outputs.matrix }}"
      ami_cleanup_sh_args: "${{ steps.options.outputs.ami_cleanup_sh_args }}"
      dryrun: "${{ steps.options.outputs.dryrun }}"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          ref: ${{ github.ref }}

      - name: Strategy
        id: strategy
        run: |
          echo "Setting strategy matrix event=${GITHUB_EVENT_NAME}"
          if [[ "${GITHUB_EVENT_NAME}" != "workflow_dispatch" ]]; then
            echo "Unsupported event ${GITHUB_EVENT_NAME}"
            exit 1
          fi
          matrix=$(src/get_dso_aws_accounts.sh gha "${{ github.event.inputs.applications }}" "${{ github.event.inputs.environments }}")
          echo '' > aws_cli_commands.sh
          echo 'matrix<<EOF' >> $GITHUB_OUTPUT
          echo "${matrix}" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
          echo "{$matrix}"

      - name: Options
        id: options
        run: |
          dryrun=0
          echo "Setting options event=${GITHUB_EVENT_NAME}"
          if [[ "${GITHUB_EVENT_NAME}" != "workflow_dispatch" ]]; then
            echo "Unsupported event ${GITHUB_EVENT_NAME}"
            exit 1
          fi
          ami_cleanup_sh_args="${{ github.event.inputs.ami_cleanup_sh_args }}"
          if [[ "${{ github.event.inputs.dryrun }}" == "true" ]]; then
            dryrun=1
          fi
          echo "ami_cleanup_sh_args=${ami_cleanup_sh_args} dryrun=${dryrun}"
          echo "ami_cleanup_sh_args=${ami_cleanup_sh_args}" >> $GITHUB_OUTPUT
          echo "dryrun=${dryrun}" >> $GITHUB_OUTPUT

      - name: Upload aws cli commands artifact
        uses: actions/upload-artifact@v4
        with:
          name: "aws_cli_commands.sh"
          path: aws_cli_commands.sh
          overwrite: true

  check-amis:
    name: Check AMIs
    runs-on: ubuntu-latest
    needs: check-strategy
    strategy:
      matrix: ${{ fromJson(needs.check-strategy.outputs.matrix) }}
      max-parallel: 1
    steps:
      - name: Get Account Details
        id: account
        run: |
          echo "source account name: ${source_account}"
          account_id="${{ fromJSON(secrets.MODERNISATION_PLATFORM_ENVIRONMENT_MANAGEMENT).account_ids[env.source_account] }}"
          role_arn="arn:aws:iam::${account_id}:role/modernisation-platform-oidc-cicd"
          echo "role arn:     ${role_arn}"
          echo "role_arn=${role_arn}" >> $GITHUB_OUTPUT      

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502  # v4.0.2
        with:
          role-to-assume: "${{ steps.account.outputs.role_arn }}"
          role-session-name: "github-${{ github.repository_id }}-${{ github.run_id }}-1"
          aws-region: eu-west-2

      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          ref: ${{ github.ref }}
          path: dso-modernisation-platform-automation

      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          repository: ministryofjustice/modernisation-platform-environments
          path: modernisation-platform-environments

      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          repository: ministryofjustice/dso-useful-stuff
          path: dso-useful-stuff

      - name: 
        id: 
        run: |
          ls ~
          mkdir ~/.aws
          cp dso-useful-stuff/aws-cli/.aws/config ~/.aws/
          aws ec2 describe-instances --profile core-shared-services-production --query "Reservations[*].Instances[*].ImageId" --output text

      - name: Check AMIs
        id: check
        working-directory: ${{ github.workspace }}/dso-modernisation-platform-automation
        run: |
          account_name="${{ matrix.account_name }}"
          application="${account_name%-*}"
          environment="${account_name##*-}"
          [[ -s "commands.sh" ]] && rm -f "commands.sh"
          touch "commands.sh"
          echo src/ami_cleanup.sh -a "$application" -s "commands.sh" -d ${{ needs.check-strategy.outputs.ami_cleanup_sh_args }} delete
          src/ami_cleanup.sh -a "$application" -s "commands.sh" -d ${{ needs.check-strategy.outputs.ami_cleanup_sh_args }} delete
          if [[ -s "commands.sh" ]]; then
            echo "cleanup=1" >> $GITHUB_OUTPUT
          else
            echo "cleanup=0" >> $GITHUB_OUTPUT
          fi

      - name: Download aws_cli_commands.sh Artifact
        if: ${{ steps.check.outputs.cleanup == 1 }}
        uses: actions/download-artifact@v5
        with:
          name: "aws_cli_commands.sh"
          path: dso-modernisation-platform-automation

      - name: Append aws cli commands
        if: ${{ steps.check.outputs.cleanup == 1 }}
        working-directory: ${{ github.workspace }}/dso-modernisation-platform-automation
        run: |
          output() {
            echo "export AWS_DEFAULT_PROFILE=${{ matrix.account_name }}"
            cat ./commands.sh
            echo "unset AWS_DEFAULT_PROFILE"
            echo ""
          }
          output
          output >> aws_cli_commands.sh

  #     - name: Upload aws_cli_commands.sh Artifact
  #       if: ${{ steps.check.outputs.cleanup == 1 }}
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: "aws_cli_commands.sh"
  #         path: dso-modernisation-platform-automation/aws_cli_commands.sh
  #         overwrite: true

  # cleanup-strategy:
  #   name: Cleanup Strategy
  #   needs: check-amis
  #   runs-on: ubuntu-latest
  #   outputs:
  #     do_update: "${{ steps.strategy.outputs.do_update }}"
  #     matrix: "${{ steps.strategy.outputs.matrix }}"
  #   steps:
  #     - name: Download Expiry Artifact
  #       uses: actions/download-artifact@v5
  #       with:
  #         name: "aws_cli_commands.sh"

  #     - name: Strategy
  #       id: strategy
  #       run: |
  #         get_matrix() {
  #           echo '{"include":['
  #           (
  #             for account in $@; do
  #               echo '{"account_name": "'"$account"'"},'
  #             done
  #           ) | sed '$s/,$//'
  #           echo ']}'
  #         }
  #         do_update=1
  #         echo "Setting strategy matrix for AMI Cleanup"
  #         accounts=$(grep '^export AWS_DEFAULT_PROFILE=' aws_cli_commands.sh | cut -d= -f2)
  #         matrix=$(get_matrix $accounts)
  #         [[ -z $accounts ]] && do_update=0
  #         echo "do_update=${do_update}"
  #         echo "${matrix}"
  #         echo "do_update=${do_update}" >> $GITHUB_OUTPUT
  #         echo 'matrix<<EOF' >> $GITHUB_OUTPUT
  #         echo "${matrix}" >> $GITHUB_OUTPUT
  #         echo 'EOF' >> $GITHUB_OUTPUT

  #     - name: Print Commands
  #       if: ${{ steps.strategy.outputs.do_update == 1 }}
  #       run: |
  #         cat aws_cli_commands.sh

  # cleanup-amis:
  #   name: Cleanup AMIs
  #   needs:
  #     - check-strategy
  #     - cleanup-strategy
  #   runs-on: ubuntu-latest
  #   if: ${{ needs.cleanup-strategy.outputs.do_update == 1 && needs.check-strategy.outputs.dryrun == 0 }}
  #   strategy:
  #     matrix: ${{ fromJson(needs.cleanup-strategy.outputs.matrix) }}
  #     max-parallel: 1
  #   steps:
  #     - name: Get Account Details
  #       id: account
  #       run: |
  #         echo "account name: ${{ matrix.account_name }}"
  #         account_id="${{ fromJSON(secrets.MODERNISATION_PLATFORM_ENVIRONMENT_MANAGEMENT).account_ids[matrix.account_name] }}"
  #         role_arn="arn:aws:iam::${account_id}:role/modernisation-platform-oidc-cicd"
  #         echo "role arn:     ${role_arn}"
  #         echo "role_arn=${role_arn}" >> $GITHUB_OUTPUT

  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502  # v4.0.2
  #       with:
  #         role-to-assume: "${{ steps.account.outputs.role_arn }}"
  #         role-session-name: "github-${{ github.repository_id }}-${{ github.run_id }}-1"
  #         aws-region: eu-west-2

  #     - name: Download Expiry Artifact
  #       uses: actions/download-artifact@v5
  #       with:
  #         name: "aws_cli_commands.sh"

  #     - name: Run Commands
  #       run: |
  #         IFS=$'\n'
  #         cmds=($(sed -n '/export AWS_DEFAULT_PROFILE=${{ matrix.account_name }}/,/unset AWS_DEFAULT_PROFILE/p' aws_cli_commands.sh | grep -v AWS_DEFAULT_PROFILE))
  #         unset IFS
  #         n=${#cmds[@]}
  #         for ((i=0;i<n;i++)); do
  #           echo "[$((i+1))/$n]: ${cmds[$i]}"
  #           echo "${cmds[$i]}" > command.sh
  #           . ./command.sh
  #         done
