name: Windows Connection Test

on:
  workflow_dispatch:
    inputs:
      instance_id:
        description: 'EC2 instance ID to test connection to'
        required: true
        type: string
      account:
        description: 'Account to control'
        type: choice
        required: true
        options:
          - 'oasys-national-reporting-production'
          - 'oasys-national-reporting-preproduction'
          - 'oasys-national-reporting-test'

permissions:
  id-token: write
  contents: read

env:
  AWS_DEFAULT_REGION: eu-west-2

jobs:
  windows-job:
    runs-on: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          ref: ${{ github.ref }}
      - name: Parse Workflow Inputs
        id: parseinput
        shell: powershell
        env:
          MODERNISATION_PLATFORM_ENVIRONMENT_MANAGEMENT: ${{ secrets.MODERNISATION_PLATFORM_ENVIRONMENT_MANAGEMENT }}
          account_input: ${{ inputs.account }}
        run: |
          $json = $env:MODERNISATION_PLATFORM_ENVIRONMENT_MANAGEMENT | ConvertFrom-Json
          $accountId = $json.account_ids.$($env:account_input)
          Write-Host "account_id=$accountId"
          "account_id=$accountId" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Set AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: "arn:aws:iam::${{ steps.parseinput.outputs.account_id }}:role/modernisation-platform-oidc-cicd"
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Connect to Instance via AWS Systems Manager
        shell: powershell
        run: |
          $instanceId = "${{ inputs.instance_id }}"
          Write-Host "Testing connection to EC2 instance $instanceId"

          $commands = @(
            'Write-Host "Connection successful"',
            'Get-ComputerInfo | Out-String'
          )

          $sendCommandInput = @{
            InstanceIds = @($instanceId)
            DocumentName = 'AWS-RunPowerShellScript'
            Parameters = @{
              commands = $commands
            }
            Comment = "Test connection to $instanceId"
          }

          $jsonInput = $sendCommandInput | ConvertTo-Json -Compress

          $jsonFile = Join-Path $env:RUNNER_TEMP 'send-command-input.json'
          Set-Content -Path $jsonFile -Value $jsonInput -Encoding utf8

          $commandId = aws ssm send-command `
            --cli-input-json file://$jsonFile `
            --query "Command.CommandId" `
            --output text

          Write-Host "Command sent with Command ID: $commandId"

          # Wait for the command to complete
          Start-Sleep -Seconds 10

          # Get command output
          $invocation = aws ssm get-command-invocation `
            --command-id $commandId `
            --instance-id $instanceId `
            --output json | ConvertFrom-Json

          if ($invocation.Status -eq 'Success') {
            Write-Host $invocation.StandardOutputContent
          } else {
            Write-Host "Command failed with status: $($invocation.Status)"
            Write-Host "Error: $($invocation.StandardErrorContent)"
          }