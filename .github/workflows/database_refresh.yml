name: AWS Database Refresh

permissions:
  id-token: write
  contents: read

on:
  workflow_call:
    inputs:
      source_oem_account_name:
        description: 'AWS account name of source OEM EC2'
        required: true
        type: string
      source_oem_hostname:
        description: 'Source database hostname or ansible group'
        required: true
        type: string
      source_db_name:
        description: 'Source database name'
        required: true
        type: string
      target_db_account_name:
        description: 'Target AWS account name'
        required: true
        type: string
      target_db_hostname:
        description: 'Target database hostname or ansible group'
        required: true
        type: string
      target_db_name:
        description: 'Target database name'
        required: true
        type: string
    secrets:
      environment_management:
        description: 'copy of environment_management secret'
        required: true
      dso_github_pat:
        description: 'DSO GitHub Personal Access Token'
        required: true

env:
  SOURCE_OEM_ACCOUNT_NUMBER: "${{ fromJSON(secrets.environment_management).account_ids[inputs.source_oem_account_name] }}"
  TARGET_DB_ACCOUNT_NUMBER: "${{ fromJSON(secrets.environment_management).account_ids[inputs.target_db_account_name] }}"

jobs:

  run_source_ansible:
    name: Run ansible against OEM EC2
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          role-to-assume: "arn:aws:iam::${{ env.SOURCE_OEM_ACCOUNT_NUMBER }}:role/modernisation-platform-oidc-cicd"
          role-session-name: "github-${{ github.repository_id }}-${{ github.run_id }}-1"
          aws-region: eu-west-2
      - name: Checkout MP Configuration Management Repo
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          repository: ministryofjustice/modernisation-platform-configuration-management
          token: ${{ secrets.dso_github_pat }}
          ref: main
          path: configuration-management
          fetch-depth: 1
      - name: Setup Ansible
        run: |
          DEPENDENCIES=`cat requirements.txt | tr '\n' ' '`
          pipx inject ansible-core $DEPENDENCIES
          ansible-galaxy role install -r requirements.yml
          ansible-galaxy collection install -r requirements.yml
        working-directory: configuration-management/ansible
      - name: Run Ansible Graph
        run: |
          ansible-inventory --graph
        working-directory: configuration-management/ansible
      - name: Run Ansible Ping
        run: |
          ansible -m ping ${{ inputs.source_oem_hostname }}
        working-directory: configuration-management/ansible
      - name: Run Ansible Playbook against source OEM
        run: |
          ansible-playbook site.yml -e role=oracle-db-refresh --tags oracle_db_refresh_get_latest_backup_control_file --limit ${{ inputs.source_oem_hostname }} --extra-vars "ORACLE_DB_REFRESH_DB_NAME=${{ inputs.source_db_name }}"
        working-directory: configuration-management/ansible
      - name: Cat control file
        run: |
          cat ${{ inputs.oracle_db_refresh_file }}
      # - name: Get Oracle Control File Name
      #   id: get_control_file_name
      #   run: |
      #     ansible -i hosts/instance_aws_ec2.yml \
      #       --module-name include_role \
      #       --args name=oracle-db-refresh \
      #       --extra-vars='ORACLE_DB_REFRESH_DB_NAME=${{ inputs.oracle_db_refresh_db_name }} ORACLE_DB_REFRESH_FILE=${{ inputs.oracle_db_refresh_file }}' \
      #       ${{ inputs.source_ansible_group }}
      #   working-directory: configuration-management/ansible
      # - name: Upload control file
      #   uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
      #   with:
      #     name: control_file
      #     path: ${{ inputs.oracle_db_refresh_file }}

  run_target_ansible:
    name: Run ansible against target database EC2
    runs-on: ubuntu-latest
    needs: run_source_ansible
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          role-to-assume: "arn:aws:iam::${{ env.TARGET_DB_ACCOUNT_NUMBER }}:role/modernisation-platform-oidc-cicd"
          role-session-name: "github-${{ github.repository_id }}-${{ github.run_id }}-2"
          aws-region: eu-west-2
      - name: Checkout MP Configuration Management Repo
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          repository: ministryofjustice/modernisation-platform-configuration-management
          token: ${{ secrets.dso_github_pat }}
          ref: main
          path: configuration-management
          fetch-depth: 1
      - name: Setup Ansible
        run: |
          DEPENDENCIES=`cat requirements.txt | tr '\n' ' '`
          pipx inject ansible-core $DEPENDENCIES
          ansible-galaxy role install -r requirements.yml
          ansible-galaxy collection install -r requirements.yml
        working-directory: configuration-management/ansible
      - name: Run Ansible Graph
        run: |
          ansible-inventory --graph
        working-directory: configuration-management/ansible
      - name: Run Ansible Ping
        run: |
          ansible -m ping ${{ inputs.target_db_hostname }}
        working-directory: configuration-management/ansible
      - name: Run Ansible Playbook against target database
        run: |
          ansible-playbook site.yml -e role=ansible-script --tags ec2patch --limit ${{ inputs.target_db_hostname }}
        working-directory: configuration-management/ansible
      # - name: Download control file
      #   uses: actions/download-artifact@c850b930e6ba138125429b7e5c93fc707a7f8427 # v4.1.4
      #   with:
      #     name: control_file
      # - name: Copy control file to target
      #   run: |
      #     ansible -i hosts/instance_aws_ec2.yml \
      #       --module-name copy \
      #       --args "src=${GITHUB_WORKSPACE}/${{ inputs.oracle_db_refresh_file }} dest=/tmp/${{ inputs.oracle_db_refresh_file }}" \
      #       ${{ inputs.target_ansible_group }}
      #   working-directory: configuration-management/ansible
      # - name: Cat control file
      #   run: |
      #     cat ${{ inputs.oracle_db_refresh_file }}
