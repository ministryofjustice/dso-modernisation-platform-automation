name: AWS Database Refresh

permissions:
  id-token: write
  contents: read

on:
  workflow_call:
    inputs:
      source_oem_account_name:
        description: 'AWS account name of source OEM EC2'
        required: true
        type: string
      source_oem_hostname:
        description: 'Source database hostname or ansible group'
        required: true
        type: string
      source_db_name:
        description: 'Source database name'
        required: true
        type: string
      target_db_account_name:
        description: 'Target AWS account name'
        required: true
        type: string
      target_db_hostname:
        description: 'Target database hostname or ansible group'
        required: true
        type: string
      target_db_name:
        description: 'Target database name'
        required: true
        type: string
      alternate_week:
        description: 'Alternate week refresh flag'
        required: true
        type: number
    secrets:
      environment_management:
        description: 'copy of environment_management secret'
        required: true
      dso_github_pat:
        description: 'DSO GitHub Personal Access Token'
        required: true

env:
  SOURCE_OEM_ACCOUNT_NUMBER: "${{ fromJSON(secrets.environment_management).account_ids[inputs.source_oem_account_name] }}"
  TARGET_DB_ACCOUNT_NUMBER: "${{ fromJSON(secrets.environment_management).account_ids[inputs.target_db_account_name] }}"

jobs:

  run_source_ansible:
    name: Run ansible against OEM EC2
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          role-to-assume: "arn:aws:iam::${{ env.SOURCE_OEM_ACCOUNT_NUMBER }}:role/modernisation-platform-oidc-cicd"
          role-session-name: "github-${{ github.repository_id }}-${{ github.run_id }}-1"
          aws-region: eu-west-2
      - name: Checkout MP Configuration Management Repo
        uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4.1.5
        with:
          repository: ministryofjustice/modernisation-platform-configuration-management
          token: ${{ secrets.dso_github_pat }}
          ref: main
          path: configuration-management
          fetch-depth: 1
      - name: Setup Ansible
        run: |
          DEPENDENCIES=`cat requirements.txt | tr '\n' ' '`
          pipx inject ansible-core $DEPENDENCIES
          ansible-galaxy role install -r requirements.yml
          ansible-galaxy collection install -r requirements.yml
        working-directory: configuration-management/ansible
      - name: Check Ansible Inventory
        run: |
          echo "Checking ansible-inventory --graph"
          ansible-inventory --graph > /dev/null
          echo "Checking ansible-inventory --host ${{ inputs.source_oem_hostname }}"
          ansible-inventory --host ${{ inputs.source_oem_hostname }} > /dev/null
        working-directory: configuration-management/ansible
      - name: Run Ansible Ping
        run: |
          ansible -m ping ${{ inputs.source_oem_hostname }}
        working-directory: configuration-management/ansible
      - name: Run Ansible Playbook against source OEM
        id: get_control_file_name
        run: |
          ansible-playbook site.yml -e role=oracle-db-refresh --tags get_latest_backup_control_file --limit ${{ inputs.source_oem_hostname }} --extra-vars "SOURCE_DB=${{ inputs.source_db_name }}"
        working-directory: configuration-management/ansible
      - name: Upload control file
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4.3.6
        with:
          name: control_file
          path: "${{ inputs.source_db_name }}_control.txt"

  run_target_ansible:
    name: Run ansible against target database EC2
    runs-on: ubuntu-latest
    needs: run_source_ansible
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          role-to-assume: "arn:aws:iam::${{ env.TARGET_DB_ACCOUNT_NUMBER }}:role/modernisation-platform-oidc-cicd"
          role-session-name: "github-${{ github.repository_id }}-${{ github.run_id }}-2"
          aws-region: eu-west-2
      - name: Checkout MP Configuration Management Repo
        uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4.1.5
        with:
          repository: ministryofjustice/modernisation-platform-configuration-management
          token: ${{ secrets.dso_github_pat }}
          ref: main
          path: configuration-management
          fetch-depth: 1
      - name: Setup Ansible
        run: |
          DEPENDENCIES=`cat requirements.txt | tr '\n' ' '`
          pipx inject ansible-core $DEPENDENCIES
          ansible-galaxy role install -r requirements.yml
          ansible-galaxy collection install -r requirements.yml
        working-directory: configuration-management/ansible
      - name: Check Ansible Inventory
        run: |
          echo "Checking ansible-inventory --graph"
          ansible-inventory --graph > /dev/null
          echo "Checking ansible-inventory --host ${{ inputs.target_db_hostname }}"
          ansible-inventory --host ${{ inputs.target_db_hostname }} > /dev/null
        working-directory: configuration-management/ansible
      - name: Run Ansible Ping
        run: |
          ansible -m ping ${{ inputs.target_db_hostname }}
        working-directory: configuration-management/ansible
      - name: Download control file
        uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
        with:
          name: control_file
      - name: Copy control file to target
        run: |
          ansible ${{ inputs.target_db_hostname }} \
            --module-name copy \
            --args "src=${GITHUB_WORKSPACE}/${{ inputs.source_db_name }}_control.txt dest=/tmp/${{ inputs.target_db_name }}_control.txt" \
            ${{ inputs.target_ansible_group }}
        working-directory: configuration-management/ansible
      - name: Run Ansible Playbook against target database
        run: |
          ansible-playbook site.yml -e force_role=oracle-db-refresh --tags refresh_db --limit ${{ inputs.target_db_hostname }} --extra-vars "TARGET_DB=${{ inputs.target_db_name }} ALTERNATE_WEEK=${{ inputs.alternate_week }}"
        working-directory: configuration-management/ansible
        
      # - name: Cat control file
      #   run: |
      #     cat ${{ inputs.oracle_db_refresh_file }}
