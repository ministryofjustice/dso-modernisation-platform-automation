name: GitHub Workflow Monitoring

permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch:
    inputs:
      repos:
        description: 'e.g. all'
        type: string
        default: all
      applications:
        description: 'e.g. hmpps-oem'
        type: string
        default: hmpps-oem
      environments:
        description: 'e.g. test'
        type: string
        default: test
      interval:
        description: 'time interval to check in seconds, default 1 hour'
        type: number
        default: 3600
      number:
        description: 'number of historic intervals to check'
        type: number
        default: 168
      round:
        type: choice
        description: 'round the time interval checked to the nearest interval'
        default: false
        options:
          - true
          - false
      dryrun:
        type: choice
        description: Dryrun mode (leave as false unless testing)
        default: false
        options:
          - true
          - false
  schedule:
    - cron: "0,30 * * * *"

jobs:
  check-strategy:
    name: Check Strategy
    runs-on: ubuntu-latest
    outputs:
      matrix: "${{ steps.strategy.outputs.matrix }}"
      repos: "${{ steps.options.outputs.repos }}"
      interval: "${{ steps.options.outputs.interval }}"
      number: "${{ steps.options.outputs.number }}"
      round: "${{ steps.options.outputs.round }}"
      dryrun: "${{ steps.options.outputs.dryrun }}"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          ref: ${{ github.ref }}

      - name: Strategy
        id: strategy
        run: |
          echo "Setting strategy matrix event=${GITHUB_EVENT_NAME}"
          if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            matrix=$(src/get_dso_aws_accounts.sh gha "${{ github.event.inputs.applications }}" "${{ github.event.inputs.environments }}")
          elif [[ "${GITHUB_EVENT_NAME}" == "schedule" ]]; then
            matrix=$(src/get_dso_aws_accounts.sh gha "hmpps-oem" "test")
            round=true
          else
            echo "Unsupported event ${GITHUB_EVENT_NAME}"
            exit 1
          fi
          echo '' > aws_cli_commands.sh
          echo 'matrix<<EOF' >> $GITHUB_OUTPUT
          echo "${matrix}" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
          echo "{$matrix}"

      - name: Options
        id: options
        run: |
          echo "Setting options event=${GITHUB_EVENT_NAME}"
          if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            dryrun="${{ github.event.inputs.dryrun }}"
            round="${{ github.event.inputs.round }}"
            interval="${{ github.event.inputs.interval }}"
            number="${{ github.event.inputs.number }}"
            repos="${{ github.event.inputs.repos }}"
          elif [[ "${GITHUB_EVENT_NAME}" == "schedule" ]]; then
            dryrun=false
            round=true
            interval=1800
            number=336 # 7 days as some pipelines only run weekly
            repos=all
          else
            echo "Unsupported event ${GITHUB_EVENT_NAME}"
            exit 1
          fi
          echo "dryrun=${dryrun} interval=${interval} number=${number} round=${round} repos=${repos}"
          echo "dryrun=${dryrun}" >> $GITHUB_OUTPUT
          echo "interval=${interval}" >> $GITHUB_OUTPUT
          echo "number=${number}" >> $GITHUB_OUTPUT
          echo "round=${round}" >> $GITHUB_OUTPUT
          echo "repos=${repos}" >> $GITHUB_OUTPUT

  check-runs:
    name: Check Runs
    runs-on: ubuntu-latest
    needs: check-strategy
    strategy:
      matrix: ${{ fromJson(needs.check-strategy.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Get Account Details
        id: account
        run: |
          echo "account name: ${{ matrix.account_name }}"
          account_id="${{ fromJSON(secrets.MODERNISATION_PLATFORM_ENVIRONMENT_MANAGEMENT).account_ids[matrix.account_name] }}"
          role_arn="arn:aws:iam::${account_id}:role/modernisation-platform-oidc-cicd"
          echo "role arn:     ${role_arn}"
          echo "role_arn=${role_arn}" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502  # v4.0.2
        with:
          role-to-assume: "${{ steps.account.outputs.role_arn }}"
          role-session-name: "github-${{ github.repository_id }}-${{ github.run_id }}-1"
          aws-region: eu-west-2

      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          ref: ${{ github.ref }}

      - name: Monitor GitHub Workflow Runs
        id: monitor
        env:
          dryrun: ${{ needs.check-strategy.outputs.dryrun }}
          round: ${{ needs.check-strategy.outputs.round }}
          interval: ${{ needs.check-strategy.outputs.interval }}
          number: ${{ needs.check-strategy.outputs.number }}
          repos: ${{ needs.check-strategy.outputs.repos }}
          GITHUB_TOKEN: ${{ secrets.DSO_GITHUB_PAT }}
        run: |
          options="-i $interval -n $number -c -v"
          if [[ $dryrun == "true" ]]; then
            options="$options -d"
          fi
          if [[ $round == "true" ]]; then
            options="$options -r"
          fi
          exitcode=0
          echo src/github-workflow-monitoring/github-workflow-monitor.sh $options $repos
          src/github-workflow-monitoring/github-workflow-monitor.sh $options $repos 2>output.txt || exitcode=$?
          failedcount=$(cat output.txt | grep "^Verbose1: " | cut -d" " -f2- | wc -l | tr -d [[:space:]])
          echo "exitcode=${exitcode} failedcount=${failedcount}"
          echo "exitcode=${exitcode}" >> $GITHUB_OUTPUT
          echo "failedcount=${failedcount}" >> $GITHUB_OUTPUT

      - name: Debug Dryrun AWS Commands
        if: ${{ needs.check-strategy.outputs.dryrun == 'true' }}
        run: |
          cat output.txt | grep "^DRYRUN: " | cut -d" " -f2-

      - name: Debug Failed GitHub Workflow Runs
        if: ${{ steps.monitor.outputs.failedcount != 0 }}
        run: |
          cat output.txt | grep "^Verbose1: " | cut -d" " -f2-

      - name: Debug Error
        if: ${{ steps.monitor.outputs.exitcode != 0 }}
        env:
          exitcode: ${{ steps.monitor.outputs.exitcode }}
        run: |
          cat output.txt | grep -v "^Verbose" | grep -v "^DRYRUN"
          exit $exitcode
