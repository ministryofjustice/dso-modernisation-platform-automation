---
name: NDH Offloc Copy to Cloud Platform

on:
  workflow_dispatch:
    inputs:
      check_files:
        type: choice
        description: Check files mode (shows what files exist without transferring)
        default: "true" # Default to true for testing
        options:
          - "true"
          - "false"

#  schedule:
    # Add this later
    # requirements - check if file exists at 01:00
    # check again at - 07:00
    # check again at - 09:00
    # Need to check if file is actually correct date FIRST!

permissions:
  id-token: write
  contents: read
  
run-name: "NDH Offloc Copy to Cloud Platform (${{ inputs.check_files == 'true' && ' check files)' || ')' }}"

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
        check_files: "${{ steps.parseinput.outputs.check_files }}"
        today: "${{ steps.parseinput.outputs.today }}"
        file_name: "${{ steps.parseinput.outputs.file_name }}"
        current_time: "${{ steps.parseinput.outputs.current_time }}"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b  # v4.1.4
        with:
          ref: ${{ github.ref }}

      - name: Parse Workflow Inputs
        id: parseinput
        run: |
            check_files="${{ github.event.inputs.check_files }}"
            echo "check_files=${check_files}" >> $GITHUB_OUTPUT
            
            # Generate date and file variables
            TODAY=$(date +"%d%m%Y")
            FILE_NAME="C_NOMIS_OFFENDER_${TODAY}_01.dat"
            CURRENT_TIME=$(date)
            
            echo "today=${TODAY}" >> $GITHUB_OUTPUT
            echo "file_name=${FILE_NAME}" >> $GITHUB_OUTPUT
            echo "current_time=${CURRENT_TIME}" >> $GITHUB_OUTPUT
            
            echo "Setup complete:"
            echo "- Check files mode: ${check_files}"
            echo "- Today: ${TODAY}"
            echo "- File name: ${FILE_NAME}"
            echo "- Current time: ${CURRENT_TIME}"
            
            if [[ "${check_files}" == "true" ]]; then
              echo "Running in check files mode."
            else
              echo "Running in transfer mode."
            fi      
 
  copytocloudplatform:
    name: Copy to Cloud Platform
    needs: setup
    runs-on: ubuntu-latest
    outputs:
      source_file_exists: ${{ steps.check_source.outputs.source_file_exists }}
      dest_file_exists: ${{ steps.check_dest.outputs.dest_file_exists }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b
        with:
          ref: ${{ github.ref }}

      - name: Get Account Id
        id: account_id
        run: |
          account_id="${{ fromJSON(secrets.MODERNISATION_PLATFORM_ENVIRONMENT_MANAGEMENT).account_ids.nomis-data-hub-production }}"
          echo "account_id=${account_id}"
          echo "account_id=${account_id}" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials for Source
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502
        with:
          role-to-assume: "arn:aws:iam::${{ steps.account_id.outputs.account_id }}:role/modernisation-platform-oidc-cicd"
          role-session-name: "github-${{ github.repository_id }}-${{ github.run_id }}-source"
          aws-region: eu-west-2

      - name: Check Source Bucket
        id: check_source
        env:
            SOURCE_BUCKET: ${{ secrets.OFFLOC_SOURCE_BUCKET }}
            FILE_NAME: ${{ needs.setup.outputs.file_name }}
            TODAY: ${{ needs.setup.outputs.today }}
            CURRENT_TIME: ${{ needs.setup.outputs.current_time }}
            CHECK_FILES: ${{ needs.setup.outputs.check_files }}
        run: |
            LOCAL_FILE="/tmp/${FILE_NAME}"
            
            echo "🔍 Checking source bucket for: ${FILE_NAME}"
            
            # Check if today's file exists in source bucket
            if aws s3 ls "s3://${SOURCE_BUCKET}/${FILE_NAME}" >/dev/null 2>&1; then
              echo "File ${FILE_NAME} found in source bucket"
              echo "source_file_exists=true" >> $GITHUB_OUTPUT
              
              if [[ "${CHECK_FILES}" == "false" ]]; then
                # Download the file
                echo "Downloading ${FILE_NAME}..."
                aws s3 cp "s3://${SOURCE_BUCKET}/${FILE_NAME}" "${LOCAL_FILE}"
                
                if [[ $? -eq 0 ]]; then
                  echo "File downloaded successfully to ${LOCAL_FILE}"
                  echo "file_downloaded=true" >> $GITHUB_ENV
                  echo "local_file=${LOCAL_FILE}" >> $GITHUB_ENV
                else
                  echo "Failed to download file"
                  exit 1
                fi
              fi
            else
              echo "File for ${TODAY} is not yet available at ${CURRENT_TIME}"
              echo "source_file_exists=false" >> $GITHUB_OUTPUT
              
              # Find the most recent file in source bucket
              echo "Looking for most recent file in source bucket..."
              RECENT_FILES=$(aws s3 ls "s3://${SOURCE_BUCKET}/" --recursive | grep "C_NOMIS_OFFENDER_.*_01\.dat" | sort -k1,2 -r | head -5)
              
              if [[ -n "${RECENT_FILES}" ]]; then
                echo "Most recent files found:"
                echo "${RECENT_FILES}"
                
                # Extract the most recent filename
                MOST_RECENT=$(echo "${RECENT_FILES}" | head -1 | awk '{print $4}')
                echo "Most recent file: ${MOST_RECENT}"
              else
                echo "No C_NOMIS_OFFENDER files found in source bucket"
              fi
              
              if [[ "${CHECK_FILES}" == "false" ]]; then
                exit 0
              fi
            fi
  
      - name: Configure AWS Credentials for Destination
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502
        with:
          role-to-assume: ${{ secrets.OFFLOC_TRANSFER_GHA_ROLE_ARN_PREPROD }}
          role-session-name: "github-${{ github.repository_id }}-${{ github.run_id }}-dest"
          aws-region: eu-west-2

      - name: Check Destination Bucket
        id: check_dest
        env:
          DEST_BUCKET: ${{ secrets.OFFLOC_TRANSFER_S3_BUCKET_NAME_PREPROD }}
          FILE_NAME: ${{ needs.setup.outputs.file_name }}
          TODAY: ${{ needs.setup.outputs.today }}
          CURRENT_TIME: ${{ needs.setup.outputs.current_time }}
          CHECK_FILES: ${{ needs.setup.outputs.check_files }}
        run: |
          echo "🔍 Checking destination bucket for: ${FILE_NAME}"
          
          # Check if file already exists in destination bucket
          if aws s3 ls "s3://${DEST_BUCKET}/${FILE_NAME}" >/dev/null 2>&1; then
            echo "File ${FILE_NAME} found in destination bucket"
            echo "dest_file_exists=true" >> $GITHUB_OUTPUT
          else
            echo "File ${FILE_NAME} not found in destination bucket"
            echo "dest_file_exists=false" >> $GITHUB_OUTPUT
            
            # Find the most recent file in destination bucket
            echo "Looking for most recent file in destination bucket..."
            RECENT_FILES=$(aws s3 ls "s3://${DEST_BUCKET}/" --recursive | grep "C_NOMIS_OFFENDER_.*_01\.dat" | sort -k1,2 -r | head -5)
            
            if [[ -n "${RECENT_FILES}" ]]; then
              echo "Most recent files found:"
              echo "${RECENT_FILES}"
              
              # Extract the most recent filename
              MOST_RECENT=$(echo "${RECENT_FILES}" | head -1 | awk '{print $4}')
              echo "Most recent file: ${MOST_RECENT}"
            else
              echo "No C_NOMIS_OFFENDER files found in destination bucket"
            fi
          fi

      - name: Process File Transfer
        if: needs.setup.outputs.check_files == 'false' && steps.check_source.outputs.source_file_exists == 'true'
        env:
          DEST_BUCKET: ${{ secrets.OFFLOC_TRANSFER_S3_BUCKET_NAME_PREPROD }}
          FILE_NAME: ${{ needs.setup.outputs.file_name }}
          TODAY: ${{ needs.setup.outputs.today }}
          CURRENT_TIME: ${{ needs.setup.outputs.current_time }}
        run: |
          LOCAL_FILE="${{ env.local_file }}"
          
          if [[ "${{ steps.check_dest.outputs.dest_file_exists }}" == "true" ]]; then
            echo "File for ${TODAY} already available at ${CURRENT_TIME}"
            
            # Delete the local file since it's already uploaded
            echo "Deleting local file..."
            rm -f "${LOCAL_FILE}"
            echo "Local file deleted"
          else
            echo "Uploading ${FILE_NAME} to destination bucket..."
            aws s3 cp "${LOCAL_FILE}" "s3://${DEST_BUCKET}/${FILE_NAME}"
            
            if [[ $? -eq 0 ]]; then
              echo "File for ${TODAY} uploaded, local file deleted at ${CURRENT_TIME}"
              
              # Delete the local file after successful upload
              rm -f "${LOCAL_FILE}"
              echo "Local file deleted"
            else
              echo "Failed to upload file"
              # Delete the local file if upload fails
              rm -f "${LOCAL_FILE}"
              echo "Local file deleted after failed upload"
              exit 1
            fi
          fi

      - name: Summary
        run: |
          echo "📊 Summary:"
          echo "- Mode: ${{ needs.setup.outputs.check_files == 'true' && 'Check Files' || 'Transfer' }}"
          echo "- Target file: ${{ needs.setup.outputs.file_name }}"
          echo "- Source file exists: ${{ steps.check_source.outputs.source_file_exists || 'unknown' }}"
          echo "- Destination file exists: ${{ steps.check_dest.outputs.dest_file_exists || 'unknown' }}"
          echo "- Current time: ${{ needs.setup.outputs.current_time }}"
