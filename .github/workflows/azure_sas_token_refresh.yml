---
name: Azure SAS Token refresh

on:
  workflow_dispatch:
    inputs:
      applications:
        description: 'Application, e.g. nomis-data-hub or leave blank for all apps configured in AZURE_SAS_TOKEN_REFRESH var'
        type: string
      environments:
        description: 'Environment, e.g. development or leave blank for all'
        type: string
      dryrun:
        type: choice
        description: Dryrun mode (leave as false unless testing)
        default: false
        options:
          - true
          - false
  schedule:
    - cron: "15 6 * * 1-5"

permissions:
  id-token: write
  contents: read

env:
  AZURE_CREDENTIALS: ${{ secrets.DSO_MODERNISATION_PLATFORM_AUTOMATION }}  # Azure credentials are managed in GitHub Secrets via dso-infra-azure-ad
  AZURE_SAS_TOKEN_REFRESH: ${{ vars.AZURE_SAS_TOKEN_REFRESH }}

jobs:
  strategy:
    name: strategy
    runs-on: ubuntu-latest
    outputs:
      matrix: "${{ steps.strategy.outputs.matrix }}"
      azure_sas_token_refresh_sh_args: "${{ steps.options.outputs.azure_sas_token_refresh_sh_args }}"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b  # v4.1.4
        with:
          ref: ${{ github.ref }}

      - name: strategy
        id: strategy
        run: |
          echo "Setting strategy matrix event=${GITHUB_EVENT_NAME}"
          if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            matrix=$(src/azure_sas_token_refresh.sh -c '${{ env.AZURE_SAS_TOKEN_REFRESH }}' -a "${{ github.event.inputs.applications }}" -e "${{ github.event.inputs.environments }}" gha)
          elif [[ "${GITHUB_EVENT_NAME}" == "schedule" ]]; then
            matrix=$(src/azure_sas_token_refresh.sh -c '${{ env.AZURE_SAS_TOKEN_REFRESH }}' gha)
          else
            echo "Unsupported event ${GITHUB_EVENT_NAME}"
            exit 1
          fi
          echo 'matrix<<EOF' >> $GITHUB_OUTPUT
          echo "${matrix}" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
          echo "{$matrix}"

      - name: options
        id: options
        run: |
          echo "Setting options event=${GITHUB_EVENT_NAME}"
          azure_sas_token_refresh_sh_args=""
          if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.dryrun }}" == "true" ]]; then
              azure_sas_token_refresh_sh_args="-d"
            fi
          elif [[ "${GITHUB_EVENT_NAME}" != "schedule" ]]; then
            echo "Unsupported event ${GITHUB_EVENT_NAME}"
            exit 1
          fi
          echo "azure_sas_token_refresh_sh_args=${azure_sas_token_refresh_sh_args}"
          echo "azure_sas_token_refresh_sh_args=${azure_sas_token_refresh_sh_args}" >> $GITHUB_OUTPUT

  azure_sas_token_refresh:
    name: refresh
    runs-on: ubuntu-latest
    needs: strategy
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.strategy.outputs.matrix) }}
    steps:
      - name: Get Account Id
        id: account_id
        run: |
          account_id="${{ fromJSON(secrets.MODERNISATION_PLATFORM_ENVIRONMENT_MANAGEMENT).account_ids[matrix.account_name] }}"
          echo "account_id=${account_id}"
          echo "account_id=${account_id}" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502  # v4.0.2
        with:
          role-to-assume: "arn:aws:iam::${{ steps.account_id.outputs.account_id }}:role/modernisation-platform-oidc-cicd"
          role-session-name: "github-${{ github.repository_id }}-${{ github.run_id }}-1"
          aws-region: eu-west-2

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      - name: Azure Subscription Check
        run: |
          az --version
          az account list

      - name: Checkout Repository
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b  # v4.1.4
        with:
          ref: ${{ github.ref }}

      - name: Refresh Token
        run: |
          application=$(echo "${{ matrix.account_name }}" | rev | cut -d- -f2- | rev)
          environment=$(echo "${{ matrix.account_name }}" | rev | cut -d- -f1 | rev)
          echo src/azure_sas_token_refresh.sh -c 'xxxx' -a \"$application\" -e \"$environment\" ${{ needs.strategy.outputs.azure_sas_token_refresh_sh_args }} refresh
          src/azure_sas_token_refresh.sh -c '${{ env.AZURE_SAS_TOKEN_REFRESH }}' -a "$application" -e "$environment" ${{ needs.strategy.outputs.azure_sas_token_refresh_sh_args }} refresh
