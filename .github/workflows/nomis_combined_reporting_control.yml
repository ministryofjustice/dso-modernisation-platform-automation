---

name: Nomis Combined Reporting Environment Control

on:
  workflow_dispatch:
    inputs:
      account:
        description: 'Account to control'
        type: choice
        required: true
        options:
          - 'nomis-combined-reporting-preproduction'
          - 'nomis-combined-reporting-test'
      environment:
        description: 'Environment to control'
        type: choice
        required: true
        default: 'preprod'
        options:
          - 'preprod'
          - 'lsast'
          - 't1'
      action:
        description: 'Action to perform'
        type: choice
        required: true
        default: 'stop'
        options:
          - 'stop'
          - 'start'
          - 'status'

permissions:
  id-token: write
  contents: read

env:
  AWS_DEFAULT_REGION: eu-west-2

run-name: "NOMIS Combined Reporting Environment Control (${{ inputs.environment }})"

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      action: "${{ inputs.action }}"
      environment: "${{ inputs.environment }}"
      account_id: "${{ steps.parseinput.outputs.account_id }}"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          ref: ${{ github.ref }}
      - name: Parse Workflow Inputs
        id: parseinput
        run: |
          account_id=${{ fromJSON(secrets.MODERNISATION_PLATFORM_ENVIRONMENT_MANAGEMENT).account_ids[ inputs.environment ] }}
          echo "account_id=${account_id}" >> "$GITHUB_OUTPUT"

  list-eligible-instances:
    name: List Eligible Instances
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      instances: ${{ steps.list-instances.outputs.INSTANCES }}
    steps:
      - name: Set AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: "arn:aws:iam::${{ needs.setup.outputs.account_id }}:role/modernisation-platform-oidc-cicd"
          aws-region: eu-west-2
      - name: List Instances
        id: list-instances
        run: |
          echo "Listing instances for environment ${{ needs.setup.outputs.environment }}"
          INSTANCES=$(aws ec2 describe-instances --filters "Name=tag-key,Values=shutdown-order" \
            --query "Reservations[*].Instances[*].[Tags[?Key=='shutdown-order'].Value | [0], InstanceId, Tags[?Key=='server-type'].Value | [0], State.Name]" \
            --output text)
          if [[ -z "$INSTANCES" ]]; then
            echo "No instances found"
            echo "instances=0" >> "$GITHUB_OUTPUT"
          else
            echo "${INSTANCES}"
            INSTANCES_SORTED=$(echo "${INSTANCES}" | sort -n -k1,1)
            echo "Sorted by shutdown order:"
            echo "${INSTANCES_SORTED}"
            if (( $(grep -c . <<<"$INSTANCES_SORTED") > 1 )); then
              echo "instances<<EOF" >> "$GITHUB_OUTPUT"
              echo "${INSTANCES_SORTED}" >> "$GITHUB_OUTPUT"
              echo "EOF" >> "$GITHUB_OUTPUT"
            else
              echo "instances=${INSTANCES}" >> "$GITHUB_OUTPUT"
            fi
          fi
  stop:
    name: Stop Environment
    needs: [setup, list-eligible-instances]
    runs-on: ubuntu-latest
    if: ${{ needs.setup.outputs.action == 'start' && needs.list-eligible-instances.outputs.instances != '0' }}
    steps:
      - name: Stop Environment
        run: |
          echo "Stopping environment ${{ needs.setup.outputs.environment }} in account ${{ inputs.account }}"
          LAST_INSTANCE_GROUP=0
          while IFS= read -r INSTANCE; do
            INSTANCE_DETAIL=($INSTANCE)
            if (( ${INSTANCE_DETAIL[0]} > $LAST_INSTANCE_GROUP )); then
              echo "Shutdown Group: ${INSTANCE_DETAIL[0]}"
            fi
            echo "Stopping instance ${INSTANCE_DETAIL[1]}"
            LAST_INSTANCE_GROUP=${INSTANCE_DETAIL[0]}
          done <<< "${{ needs.list-eligible-instances.outputs.instances }}"
  start:
    name: Start Environment
    needs: [setup, list-eligible-instances]
    runs-on: ubuntu-latest
    if: ${{ needs.setup.outputs.action == 'start' && needs.list-eligible-instances.outputs.instances != '0' }}
    steps:
      - name: Start Environment
        run: |
          echo "Starting environment ${{ needs.setup.outputs.environment }} in account ${{ inputs.account }}"
          LAST_INSTANCE_GROUP=0
          while IFS= read -r INSTANCE; do
            INSTANCE_DETAIL=($INSTANCE)
            if (( ${INSTANCE_DETAIL[0]} > $LAST_INSTANCE_GROUP )); then
              echo "Startup Group: ${INSTANCE_DETAIL[0]}"
            fi
            echo "Starting instance ${INSTANCE_DETAIL[1]}"
            LAST_INSTANCE_GROUP=${INSTANCE_DETAIL[0]}
          done <<< "${{ needs.list-eligible-instances.outputs.instances }}"
  status:
    name: Environment Status
    needs: [setup, list-eligible-instances]
    runs-on: ubuntu-latest
    if: ${{ needs.setup.outputs.action == 'status' && needs.list-eligible-instances.outputs.instances != '0' }}
    steps:
      - name: Environment Status
        run: |
          echo "Reporting status for ${{ inputs.account }} - environment: ${{ needs.setup.outputs.environment }}"
          while IFS= read -r INSTANCE; do
            INSTANCE_DETAIL=($INSTANCE)
            echo "${INSTANCE_DETAIL[1]} - ${INSTANCE_DETAIL[3]}"
          done <<< "${{ needs.list-eligible-instances.outputs.instances }}"
